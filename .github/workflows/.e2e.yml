name: .E2E
env:
  deployment_name: pay-transparency
on:
  workflow_dispatch:
    secrets:
      E2E_USERNAME:
        required: true
      E2E_PASSWORD:
        required: true
      EXTERNAL_CONSUMER_DELETE_REPORTS_API_KEY:
        required: true
    inputs:
      frontend-url:
        description: "Frontend URL of the application"
        required: true
        type: string
      external-api-base-url :
        description: "Base URL to the external service API"
        required: true
        type: string
      environment:
        description: "Environment to read secrets from GitHub secrets"
        required: false
        default: dev
        type: string
      timeout-minutes:
        description: 'Timeout minutes'
        default: 8
        required: false
        type: number
  workflow_call:
    secrets:
      E2E_USERNAME:
        required: true
      E2E_PASSWORD:
        required: true
      EXTERNAL_CONSUMER_DELETE_REPORTS_API_KEY:
        required: true
    inputs:
      frontend-url:
        description: "Frontend URL of the application"
        required: true
        type: string
      environment:
        description: "Environment to read secrets from GitHub secrets"
        required: false
        default: dev
        type: string
      external-api-base-url :
        description: "Base URL to the external service API"
        required: true
        type: string
      timeout-minutes:
        description: 'Timeout minutes'
        default: 8
        required: false
        type: number

jobs:
  # Job to clean up existing visual regression comments before starting tests
  cleanup-comments:
    name: Cleanup Previous Comments
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-24.04
    steps:
      - name: Delete existing visual regression comments
        uses: actions/github-script@v7
        with:
          script: |
            // Delete any existing visual regression comments from this bot
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            for (const comment of comments.data) {
              if (comment.user.type === 'Bot' && 
                  comment.body.includes('🖼️ Playwright Visual Regression Test Results')) {
                await github.rest.issues.deleteComment({
                  comment_id: comment.id,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                });
                console.log(`Deleted existing visual regression comment: ${comment.id}`);
              }
            }

  end-to-end:
    name: Tests
    needs: cleanup-comments
    environment: ${{ inputs.environment }}
    defaults:
      run:
        working-directory: frontend
    runs-on: ubuntu-24.04
    timeout-minutes: ${{ fromJson(inputs.timeout-minutes) }}
    strategy:
      max-parallel: 2
      matrix:
        project: [Google Chrome, firefox, safari, Microsoft Edge]
    steps:
      - uses: actions/checkout@v5
        name: Checkout
      - uses: actions/setup-node@v4
        name: Setup Node
        with:
          node-version: 22
      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps 
      - name: Run Tests
        id: run-tests
        env:
          E2E_BASE_URL: ${{ inputs.frontend-url }}
          E2E_USERNAME: ${{ secrets.E2E_USERNAME }}
          E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}
          EXTERNAL_CONSUMER_DELETE_REPORTS_API_KEY: ${{ secrets.EXTERNAL_CONSUMER_DELETE_REPORTS_API_KEY }}
          EXTERNAL_API_BASE_URL: ${{ inputs.external-api-base-url }}
        run: |
          set -e
          npx playwright test --project="${{ matrix.project }}" --reporter=html 2>&1 | tee output.log || {
            # Check if the failure is due to screenshot differences
            if grep -q "Screenshot comparison failed" output.log || grep -q "A snapshot doesn't exist" output.log; then
              echo "SCREENSHOT_DIFFERENCES=true" >> $GITHUB_ENV
              echo "Screenshot differences detected"
              exit 1
            else
              # Other test failures, re-exit with original code
              exit 1
            fi
          }

      - uses: actions/upload-artifact@v4
        if: always()
        id: artifact-upload
        name: upload results
        env:
          PW_TEST_HTML_REPORT_OPEN: always
        with:
          name: playwright-report-${{ matrix.project }}
          path: "./frontend/playwright-report" # path from current folder
          retention-days: 7

      # Upload test output logs for screenshot difference detection
      - uses: actions/upload-artifact@v4
        if: always()
        name: upload test logs
        with:
          name: test-output-${{ matrix.project }}
          path: "./frontend/output.log"
          retention-days: 7

  # Job to create a single consolidated comment for all browsers
  create-visual-comment:
    name: Create Visual Regression Comment
    needs: end-to-end
    if: always() && github.event_name == 'pull_request'
    runs-on: ubuntu-24.04
    steps:
      - name: Download all test outputs
        uses: actions/download-artifact@v4
        with:
          pattern: test-output-*
          path: test-outputs
          merge-multiple: false

      - name: Create consolidated comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Check each browser's test output for screenshot differences
            const browsers = ['Google Chrome', 'firefox', 'safari', 'Microsoft Edge'];
            const results = [];
            let hasAnyScreenshotIssues = false;
            
            for (const browser of browsers) {
              const outputDir = `test-outputs/test-output-${browser}`;
              const outputFile = path.join(outputDir, 'output.log');
              
              let hasScreenshotIssues = false;
              let screenshotErrors = [];
              
              try {
                if (fs.existsSync(outputFile)) {
                  const logContent = fs.readFileSync(outputFile, 'utf8');
                  
                  // Check for screenshot-related errors
                  if (logContent.includes('Screenshot comparison failed') || 
                      logContent.includes('A snapshot doesn\'t exist')) {
                    hasScreenshotIssues = true;
                    hasAnyScreenshotIssues = true;
                    
                    screenshotErrors = logContent
                      .split('\n')
                      .filter(line => line.includes('Screenshot comparison failed') || 
                                     line.includes('snapshot doesn\'t exist'))
                      .slice(0, 3); // Limit to first 3 errors per browser
                  }
                }
              } catch (error) {
                console.log(`Could not read test output for ${browser}: ${error.message}`);
              }
              
              results.push({
                browser,
                hasScreenshotIssues,
                screenshotErrors
              });
            }
            
            // Only create a comment if there are screenshot issues
            if (hasAnyScreenshotIssues) {
              let comment = `### 🖼️ Playwright Visual Regression Test Results
              
              Visual differences were detected in the following browsers:
              
              `;
              
              for (const result of results) {
                if (result.hasScreenshotIssues) {
                  comment += `#### ❌ ${result.browser}
              **Issues Found:**
              ${result.screenshotErrors.length > 0 ? result.screenshotErrors.map(error => `- ${error.trim()}`).join('\n') : '- Check the test logs for details'}
              
              `;
                } else {
                  comment += `#### ✅ ${result.browser} - No visual issues detected
              
              `;
                }
              }
              
              comment += `
              **Next Steps:**
              1. 📊 [View the detailed Playwright reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) to see visual differences
              2. 🔍 Review the changes to determine if they're expected
              3. ✅ If the visual changes are correct, comment \`/approve-screenshots\` to update the baseline screenshots
              
              **Reports:** Available in the workflow artifacts above`;
              
              // Create the consolidated comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

