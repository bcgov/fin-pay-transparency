name: .Deploy
env:
  deployment_name: pay-transparency
on:
  workflow_call:
    inputs:
      target:
        description: "PR number, test or prod."
        required: true
        type: string
      autoscaling:
        description: "Autoscaling enabled or not for the deployments"
        required: false
        type: boolean
        default: true
      tag:
        description: "Docker tag; e.g. PR number, tag, test or prod"
        required: false
        type: string
        default: ${{ github.event.number }}

      directory:
        description: "Chart directory."
        default: "charts/${{ github.event.repository.name }}"
        required: false
        type: string
      timeout-minutes:
        description: "Timeout minutes"
        default: 12
        required: false
        type: number
      values:
        description: "Values file."
        default: "values.yaml"
        required: false
        type: string

      frontend-url:
        description: "Frontend URL of the application"
        required: true
        type: string
      admin-frontend-url:
        description: "URL of the admin frontend application"
        required: true
        type: string
      environment:
        description: "Environment to read secrets from GitHub secrets"
        required: false
        default: dev
        type: string
      semver:
        description: "Semver version of the helm chart"
        required: false
        type: string
        default: 0.0.1
      params:
        description: "Extra params to pass to helm upgrade command"
        required: false
        type: string
        default: ""

jobs:
  deploys:
    name: Helm
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-22.04
    timeout-minutes: ${{ inputs.timeout-minutes }}
    env:
      UI_PUBLIC_KEY: |
        ${{ secrets.UI_PUBLIC_KEY }}
      UI_PRIVATE_KEY: |
        ${{ secrets.UI_PRIVATE_KEY }}
    steps:
      - name: Set Variables
        id: vars
        shell: bash
        run: |
          # remove the excess part from semver, for example: x.x.x_* -> x.x.x
          semver=$(echo ${{ inputs.semver }} | cut -d'_' -f1)
          echo "Semver: $semver"
          echo "semver=${semver}" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v4
        name: checkout
      - name: Login to OpenShift
        shell: bash
        run: |
          # Allow pipefail, since we could be catching oc create errors
          set +o pipefail

          # Login to OpenShift (NOTE: project command is a safeguard)
          oc login --token=${{ secrets.oc_token }} --server=${{ vars.oc_server }}
          oc project ${{ vars.oc_namespace }}

      - name: Clean PR Environment
        shell: bash
        run: |

          # If inputs.target starts with 'pr-', uninstall the helm chart first to ensure a clean install
          if [[ "${{ inputs.target }}" == pr-* ]]; then
            helm uninstall ${{ env.deployment_name }}-${{ inputs.target }} || true
          fi

      - name: Package HELM Chart
        shell: bash
        run: |
          helm package -u --app-version="${{ inputs.tag }}" --version=${{ steps.vars.outputs.semver }} ${{ inputs.directory }}

      - name: Deploy to OpenShift
        shell: bash
        run: |

          # 1 minute less for HELM to do atomic deployment and rollback if not completed within the time.
          DEPLOY_TIMEOUT=$((${{ inputs.timeout-minutes }}-1)) 

          # Perform atomic upgrade/installation of helm chart
          helm upgrade --debug --install --wait ${{ env.deployment_name }}-${{ inputs.target }} \
          --values ${{ inputs.directory }}/${{ inputs.values }} \
          --set-string backend.image.tag="${{ inputs.tag }}" \
          --set-string admin-frontend.image.tag="${{ inputs.tag }}" \
          --set-string frontend.image.tag="${{ inputs.tag }}" \
          --set-string database.image.tag="${{ inputs.tag }}" \
          --set-string doc-gen-service.image.tag="${{ inputs.tag }}" \
          --set-string backend-external.image.tag="${{ inputs.tag }}" \
          --set-string maintenance.image.tag="${{ inputs.tag }}" \
          --set global.autoscaling.enabled=${{ inputs.autoscaling }} \
          --set-string global.secrets.keycloakClientId="${{ secrets.KEYCLOAK_CLIENT_ID }}" \
          --set-string global.secrets.keycloakClientSecret="${{ secrets.KEYCLOAK_CLIENT_SECRET }}" \
          --set-string global.secrets.keycloakUrl="${{ secrets.KEYCLOAK_URL }}" \
          --set-string global.secrets.adminKeycloakUrl="${{ secrets.ADMIN_KEYCLOAK_URL }}" \
          --set-string global.secrets.adminKeycloakClientId="${{ secrets.ADMIN_KEYCLOAK_CLIENT_ID }}" \
          --set-string global.secrets.adminKeycloakClientSecret="${{ secrets.ADMIN_KEYCLOAK_CLIENT_SECRET }}" \
          --set-string global.secrets.uiPrivateKey="${{ env.UI_PRIVATE_KEY }}" \
          --set-string global.secrets.uiPublicKey="${{ env.UI_PUBLIC_KEY }}" \
          --set-string global.secrets.databasePassword="${{ secrets.DATABASE_PWD }}" \
          --set-string global.secrets.databaseUser="${{ secrets.DATABASE_USER }}" \
          --set-string global.secrets.databaseName="${{ secrets.DATABASE_NAME }}"  \
          --set-string global.secrets.bceidWsUrl="${{ secrets.BCEID_WS_URL }}" \
          --set-string global.secrets.bceidWsAuthPassword="${{ secrets.BCEID_WS_BASIC_AUTH_PASSWORD }}" \
          --set-string global.secrets.bceidWsAuthUserName="${{ secrets.BCEID_WS_BASIC_AUTH_USERNAME }}" \
          --set-string global.secrets.bceidWsOnlineServiceId="${{ secrets.BCEID_WS_ONLINE_SERVICE_ID }}"  \
          --set-string global.secrets.cssAppApiClientId="${{ secrets.CSS_APP_API_CLIENT_ID }}" \
          --set-string global.secrets.cssAppApiClientSecret="${{ secrets.CSS_APP_API_CLIENT_SECRET }}" \
          --set-string global.secrets.cssAppApiIntegrationId="${{ secrets.CSS_APP_API_INTEGRATION_ID }}"  \
          --set-string global.secrets.cssAppApiEnvironment="${{ inputs.environment }}"  \
          --set-string global.secrets.externalConsumerApiKey="${{ secrets.EXTERNAL_CONSUMER_API_KEY }}"  \
          --set-string global.secrets.externalConsumerDeleteReportsApiKey="${{ secrets.EXTERNAL_CONSUMER_DELETE_REPORTS_API_KEY }}" \
          --set-string global.secrets.externalConsumerErrorReportsApiKey="${{ secrets.EXTERNAL_CONSUMER_ERROR_REPORTS_API_KEY }}" \
          --set-string global.secrets.chesTokenURL="${{ secrets.CHES_TOKEN_ENDPOINT }}" \
          --set-string global.secrets.chesClientID="${{ secrets.CHES_CLIENT_ID }}" \
          --set-string global.secrets.chesClientSecret="${{ secrets.CHES_CLIENT_SECRET }}"  \
          --set-string global.secrets.chesAPIURL="${{ secrets.CHES_API_URL }}"  \
          --set-string global.secrets.chesEmailRecipients="${{ secrets.CHES_EMAIL_RECIPIENTS }}"  \
          --set-string global.secrets.adminFrontendUrl="${{ secrets.ADMIN_FRONTEND_URL }}"  \
          --set-string global.secrets.entraClientId="${{secrets.ENTRA_APP_CLIENT_ID }}" \
          --set-string global.secrets.entraClientSecret="${{secrets.ENTRA_APP_CLIENT_SECRET }}" \
          --set-string global.secrets.entraTenantId="${{secrets.ENTRA_APP_TENANT_ID }}" \
          --set-string global.secrets.powerBiUrl="${{secrets.BACKEND_POWERBI_URL }}" \
          --set-string global.secrets.s3AccessKeyId="${{secrets.S3_ACCESS_KEY }}" \
          --set-string global.secrets.s3SecretAccessKey="${{secrets.S3_SECRET_ACCESS_KEY }}" \
          --set-string global.secrets.s3Endpoint="${{secrets.S3_ENDPOINT }}" \
          --set-string global.secrets.s3Bucket="${{secrets.S3_BUCKET }}" \
          --set-string global.secrets.powerBiAnalyticsWorkspaceId="${{secrets.POWERBI_ANALYTICS_WORKSPACE_ID }}" \
          --set-string global.secrets.powerBiAnalyticsReportId="${{secrets.POWERBI_ANALYTICS_REPORT_ID }}" \
          --set-string global.serverAdminFrontend="${{ inputs.admin-frontend-url }}" \
          --set-string global.serverFrontend="${{ inputs.frontend-url }}" \
          --set-string crunchy.pgBackRest.s3.bucket="${{ secrets.S3_BUCKET }}"  \
          --set-string crunchy.pgBackRest.s3.endpoint="${{ secrets.S3_ENDPOINT }}"  \
          --set-string crunchy.pgBackRest.s3.accessKey="${{ secrets.S3_ACCESS_KEY }}"  \
          --set-string crunchy.pgBackRest.s3.secretKey="${{ secrets.S3_SECRET_ACCESS_KEY }}"  \
          --set-string global.secrets.clamavApiKey="${{ secrets.CLAMAV_API_KEY }}" \
          --set-string global.secrets.snowplowUrl="${{ secrets.SNOWPLOW_URL }}" \
          ${{ inputs.params }} \
          ./${{ github.event.repository.name }}-${{ steps.vars.outputs.semver }}.tgz

      - name: Print HELM Chart History
        shell: bash
        run: |
          # print history 
          helm history ${{ env.deployment_name }}-${{ inputs.target }}
