services:
  database:
    image: postgres:17
    container_name: database
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    hostname: database
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
    ports:
      - "5432:5432"
    restart: unless-stopped
    user: postgres        
    networks:
      - default
  database-migrations:
    image: flyway/flyway:10-alpine
    container_name: backend-migrations
    command:
      - info
      - migrate
      - info
    volumes:
      - "./backend/db/migrations:/flyway/sql"
    environment:
      - FLYWAY_URL=jdbc:postgresql://database:5432/postgres
      - FLYWAY_USER=postgres
      - FLYWAY_PASSWORD=postgres
      - FLYWAY_BASELINE_ON_MIGRATE=true
      - FLYWAY_DEFAULT_SCHEMA=pay_transparency
    depends_on:
      database:
        condition: service_healthy
    networks:
      - default
  clamav:
    image: clamav/clamav
    container_name: clamav
    restart: unless-stopped
    ports:
      - "3310:3310"
    networks:
      - default
  backend:
    image: backend:latest
    build:
      context: backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/.env
    environment:
      NODE_ENV: development
      POSTGRESQL_HOST: database
      PORT: "3000"
      DOC_GEN_SERVICE_URL: http://doc-gen-service:3000
    hostname: backend
    links:
      - database
    ports:
      - "3000:3000"
    user: root
    depends_on:
      database:
        condition: service_healthy
      database-migrations:
        condition: service_started
    networks:
      - default
  doc-gen-service:
    image: doc-gen-service:latest
    build:
      context: doc-gen-service
      dockerfile: Dockerfile
    environment:
      NODE_ENV: development
      PORT: "3000"
    hostname: doc-gen-service
    ports:
      - "3001:3000"
    user: "1001"
    depends_on:
      backend:
        condition: service_started
    networks:
      - default
  backend-external:
    image: backend-external:latest
    build:
      context: backend-external
      dockerfile: Dockerfile
    environment:
      NODE_ENV: development
      PORT: "3000"
    hostname: backend-external
    ports:
      - "3002:3000"
    user: "1001"
    depends_on:
      backend:
        condition: service_started
    networks:
      - default
  frontend:
    container_name: frontend
    build:
      context: frontend
      dockerfile: Dockerfile
    environment:
      NODE_ENV: development
      BACKEND_URL: backend
    hostname: frontend
    links:
      - backend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app:z
      - /app/node_modules
    user: root
    working_dir: "/app"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - default
  admin-frontend:
    container_name: admin-frontend
    build:
      context: admin-frontend
      dockerfile: Dockerfile
    environment:
      NODE_ENV: development
      BACKEND_URL: backend
    hostname: admin-frontend
    links:
      - backend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app:z
      - /app/node_modules
    user: root
    working_dir: "/app"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - default
networks:
  default:
    driver: bridge
